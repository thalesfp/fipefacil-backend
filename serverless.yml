service: fipefacil

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  stackName: fipefacil-backend
  memorySize: 256
  environment:
    PRICES_TABLE: prices
    REFERENCES_QUEUE: https://sqs.${self:provider.region}.amazonaws.com/678634121400/references
    BRANDS_QUEUE: https://sqs.${self:provider.region}.amazonaws.com/678634121400/brands
    MODELS_QUEUE: https://sqs.${self:provider.region}.amazonaws.com/678634121400/models
    YEAR_MODELS_QUEUE: https://sqs.${self:provider.region}.amazonaws.com/678634121400/yearmodels
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:PutItem
      Resource:
        - arn:aws:dynamodb:${self:provider.region}:678634121400:table/prices
    - Effect: Allow
      Action:
        - sqs:SendMessage
        - sqs:ReceiveMessage
      Resource:
        - arn:aws:sqs:${self:provider.region}:678634121400:references
    - Effect: Allow
      Action:
        - sqs:SendMessage
        - sqs:ReceiveMessage
      Resource:
        - arn:aws:sqs:${self:provider.region}:678634121400:brands
    - Effect: Allow
      Action:
        - sqs:SendMessage
        - sqs:ReceiveMessage
      Resource:
        - arn:aws:sqs:${self:provider.region}:678634121400:models
    - Effect: Allow
      Action:
        - sqs:SendMessage
        - sqs:ReceiveMessage
      Resource:
        - arn:aws:sqs:${self:provider.region}:678634121400:yearmodels

functions:
  checkForUpdate:
    handler: src/lambda/handler.checkForUpdateHandler
    events:
      - http:
          path: /checkForUpdate
          method: get
  startUpdateReference:
    handler: src/lambda/handler.startUpdateReferenceHandler
    events:
      - sqs:
          arn: arn:aws:sqs:${self:provider.region}:678634121400:references
          batchSize: 1
      - http:
          path: /startUpdateReference
          method: get
  startUpdateBrand:
    handler: src/lambda/handler.startUpdateBrandHandler
    reservedConcurrency: 10
    timeout: 15
    events:
      - sqs:
          arn: arn:aws:sqs:${self:provider.region}:678634121400:brands
          batchSize: 1
      - http:
          path: /startUpdateBrand
          method: get
  startUpdateModel:
    handler: src/lambda/handler.startUpdateModelHandler
    reservedConcurrency: 10
    events:
      - sqs:
          arn: arn:aws:sqs:${self:provider.region}:678634121400:models
          batchSize: 1
      - http:
          path: /startUpdateModel
          method: get
  startUpdateYearModel:
    handler: src/lambda/handler.startUpdateYearModelHandler
    reservedConcurrency: 10
    events:
      - sqs:
          arn: arn:aws:sqs:${self:provider.region}:678634121400:yearmodels
          batchSize: 1
      - http:
          path: /startUpdateYearModel
          method: get

resources:
  Resources:
    PricesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: prices
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
          - AttributeName: sk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
          - AttributeName: sk
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 25
          WriteCapacityUnits: 25
    ReferencesQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "references"
    BrandsQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "brands"
    ModelsQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "models"
    YearModelsQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "yearmodels"

package:
  individually: true

plugins:
  - serverless-webpack

custom:
  enterprise:
    collectLambdaLogs: false
  webpack:
    includeModules:
      forceExclude:
        - aws-sdk
