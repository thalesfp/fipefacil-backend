service: fipefacil

custom:
  functions:
    reservedConcurrency: 2
    batchSize: 1
    timeout: 15
  enterprise:
    collectLambdaLogs: false
  webpack:
    includeModules:
      forceExclude:
        - aws-sdk
  customDomain:
    domainName: ${self:service}.thales.work
    certificateName: "*.thales.work"

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, "dev"}
  region: us-east-1
  accountId: 678634121400
  memorySize: 256
  environment:
    PRICES_TABLE: prices-${self:provider.stage}
    REFERENCES_QUEUE: https://sqs.${self:provider.region}.amazonaws.com/${self:provider.accountId}/references-${self:provider.stage}
    BRANDS_QUEUE: https://sqs.${self:provider.region}.amazonaws.com/${self:provider.accountId}/brands-${self:provider.stage}
    MODELS_QUEUE: https://sqs.${self:provider.region}.amazonaws.com/${self:provider.accountId}/models-${self:provider.stage}
    YEAR_MODELS_QUEUE: https://sqs.${self:provider.region}.amazonaws.com/${self:provider.accountId}/yearmodels-${self:provider.stage}
    UPDATE_FILES_BUCKET_NAME: update-files-bucket-${self:provider.stage}
    UPDATE_FILES_BUCKET_REGION: us-east-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:PutItem
        - dynamodb:UpdateItem
      Resource:
        - Fn::GetAtt: [PricesTable, Arn]
    - Effect: Allow
      Action:
        - sqs:SendMessage
        - sqs:ReceiveMessage
      Resource:
        - Fn::GetAtt: [ReferencesQueue, Arn]
    - Effect: Allow
      Action:
        - sqs:SendMessage
        - sqs:ReceiveMessage
      Resource:
        - Fn::GetAtt: [BrandsQueue, Arn]
    - Effect: Allow
      Action:
        - sqs:SendMessage
        - sqs:ReceiveMessage
      Resource:
        - Fn::GetAtt: [ModelsQueue, Arn]
    - Effect: Allow
      Action:
        - sqs:SendMessage
        - sqs:ReceiveMessage
      Resource:
        - Fn::GetAtt: [YearModelsQueue, Arn]
    - Effect: Allow
      Action:
        - s3:ListBucket
      Resource:
        - Fn::GetAtt: [UpdateFilesBucket, Arn]
    - Effect: Allow
      Action:
        - s3:PutObject
      Resource:
        - Fn::Join: ["", [Fn::GetAtt: [UpdateFilesBucket, Arn], "/*"]]

functions:
  checkForUpdate:
    handler: src/lambda/updateHandler.checkForUpdateHandler
    events:
      - http:
          path: /checkForUpdate
          method: get
  startUpdateReference:
    handler: src/lambda/updateHandler.startUpdateReferenceHandler
    events:
      - sqs:
          arn:
            Fn::GetAtt: [ReferencesQueue, Arn]
          batchSize: ${self:custom.functions.batchSize}
      - http:
          path: /startUpdateReference
          method: get
  startUpdateBrand:
    handler: src/lambda/updateHandler.startUpdateBrandHandler
    reservedConcurrency: ${self:custom.functions.reservedConcurrency}
    timeout: ${self:custom.functions.timeout}
    events:
      - sqs:
          arn:
            Fn::GetAtt: [BrandsQueue, Arn]
          batchSize: ${self:custom.functions.batchSize}
      - http:
          path: /startUpdateBrand
          method: get
  startUpdateModel:
    handler: src/lambda/updateHandler.startUpdateModelHandler
    reservedConcurrency: ${self:custom.functions.reservedConcurrency}
    events:
      - sqs:
          arn:
            Fn::GetAtt: [ModelsQueue, Arn]
          batchSize: ${self:custom.functions.batchSize}
      - http:
          path: /startUpdateModel
          method: get
  startUpdateYearModel:
    handler: src/lambda/updateHandler.startUpdateYearModelHandler
    reservedConcurrency: ${self:custom.functions.reservedConcurrency}
    events:
      - sqs:
          arn:
            Fn::GetAtt: [YearModelsQueue, Arn]
          batchSize: ${self:custom.functions.batchSize}
      - http:
          path: /startUpdateYearModel
          method: get
  createUpdateFiles:
    handler: src/lambda/updateHandler.createUpdateFilesHandler
    timeout: 900
  queryCurrentReference:
    handler: src/lambda/queryHandler.queryCurrentReference
    events:
      - http:
          path: /currentReference
          method: get
          cors: true
  queryBrands:
    handler: src/lambda/queryHandler.queryBrands
    events:
      - http:
          path: /{vehicleType}/brands
          method: get
          cors: true
          request:
            parameters:
              paths:
                vehicleType: true
  queryModels:
    handler: src/lambda/queryHandler.queryModels
    events:
      - http:
          path: /brand/{brandId}/models
          method: get
          cors: true
          request:
            parameters:
              paths:
                brandId: true
  queryYearModels:
    handler: src/lambda/queryHandler.queryYearModels
    events:
      - http:
          path: /model/{modelId}/yearModels
          method: get
          cors: true
          request:
            parameters:
              paths:
                modelId: true

resources:
  - ${file(serverless/resources-dynamodb.yml)}
  - ${file(serverless/resources-sqs.yml)}
  - ${file(serverless/resources-s3.yml)}

package:
  individually: true
  exclude:
    - node_modules/aws-sdk/**

plugins:
  - serverless-plugin-typescript
  - serverless-domain-manager
